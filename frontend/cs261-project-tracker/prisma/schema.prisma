generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model morale {
  project     Int
  u_id        Int
  submit_date DateTime @default(now()) @db.Date
  morale      Int
  projects    projects @relation(fields: [project], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users    @relation(fields: [u_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([project, u_id, submit_date, morale])
}

model project_developers {
  project   Int
  u_id      Int
  ismanager Boolean
  projects  projects @relation(fields: [project], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users    @relation(fields: [u_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([project, u_id])
}

model project_requirements {
  id                   Int      @id @default(autoincrement())
  project              Int
  requirement          String?  @db.VarChar(100)
  project_category     String?  @db.VarChar(100)
  requirement_category String?  @db.VarChar(100)
  risk_target_category String?  @db.VarChar(100)
  probability          Float?   @db.DoublePrecision
  impact               String?  @db.VarChar(100)
  dimension_of_risk    String?  @db.VarChar(100)
  affecting_no_modules Int?
  fixing_duration      Int?
  fixing_cost          Float?   @db.DoublePrecision
  projects             projects @relation(fields: [project], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model projects {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(100)
  start_date           DateTime               @db.Date
  deadline             DateTime               @db.Date
  end_date             DateTime?              @db.Date
  budget               Int
  risk                 Int?
  repository_link      String                 @db.VarChar(500)
  morale               morale[]
  project_developers   project_developers[]
  project_requirements project_requirements[]
  user_invites         user_invites[]
}

model user_invites {
  project   Int
  u_id      Int
  ismanager Boolean
  projects  projects @relation(fields: [project], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users    @relation(fields: [u_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([project, u_id])
}

model users {
  id                 Int                  @id @default(autoincrement())
  forename           String               @db.VarChar(100)
  surname            String               @db.VarChar(100)
  email              String               @unique @db.VarChar(100)
  password           String               @db.VarChar(100)
  years_experience   Int
  morale             morale[]
  project_developers project_developers[]
  user_invites       user_invites[]
}
