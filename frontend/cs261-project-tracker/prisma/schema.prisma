generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model morale {
  project     Int
  u_id        Int
  submit_date DateTime @db.Date @default(now())
  morale      Int
  projects    projects @relation(fields: [project], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users    @relation(fields: [u_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([project, u_id, submit_date, morale])
}

model project_developers {
  project   Int
  u_id      Int
  ismanager Boolean
  projects  projects @relation(fields: [project], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users    @relation(fields: [u_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([project, u_id])
}

model project_tasks {
  id          Int          @id @default(autoincrement())
  project     Int
  name        String       @db.VarChar(100)
  description String?      @db.VarChar(1000)
  start_date  DateTime     @db.Date @default(now())
  deadline    DateTime     @db.Date
  end_date    DateTime?    @db.Date
  progress    String?      @db.VarChar(100)
  risk        Int?
  projects    projects     @relation(fields: [project], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_tasks  user_tasks[]
}

model projects {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(100)
  start_date         DateTime             @db.Date
  deadline           DateTime             @db.Date
  end_date           DateTime?            @db.Date
  budget             Int
  categories	     String[]
  risk               Int?
  repository_link    String               @db.VarChar(500)
  morale             morale[]
  project_developers project_developers[]
  project_tasks      project_tasks[]
  user_invites       user_invites[]
}

model user_invites {
  project  Int
  u_id     Int
  ismanager Boolean
  projects projects @relation(fields: [project], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users    users    @relation(fields: [u_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([project, u_id])
}

model users {
  id                 Int                  @id @default(autoincrement())
  forename           String               @db.VarChar(100)
  surname            String               @db.VarChar(100)
  email              String               @db.VarChar(100) @unique
  password           String               @db.VarChar(100)
  years_experience   Int
  morale             morale[]
  project_developers project_developers[]
  user_invites       user_invites[]
  user_tasks         user_tasks[]
}

model user_tasks {
  task          Int
  u_id          Int
  users         users         @relation(fields: [u_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project_tasks project_tasks @relation(fields: [task], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([task, u_id])
}
